"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[66390],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),h=r,d=u["".concat(l,".").concat(h)]||u[h]||m[h]||o;return n?a.createElement(d,s(s({ref:t},c),{},{components:n})):a.createElement(d,s({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7883:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={id:"index",title:"Introduction to ZIO Constraintless",sidebar_label:"ZIO Constraintless"},s=void 0,i={unversionedId:"zio-constraintless/index",id:"zio-constraintless/index",title:"Introduction to ZIO Constraintless",description:"Allows you to build programs as mere descriptions with maximum polymorphism, maximum modularity, zero abstraction leakage, and zero casting.",source:"@site/docs/zio-constraintless/index.md",sourceDirName:"zio-constraintless",slug:"/zio-constraintless/",permalink:"/zio-constraintless/",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-constraintless/index.md",tags:[],version:"current",frontMatter:{id:"index",title:"Introduction to ZIO Constraintless",sidebar_label:"ZIO Constraintless"},sidebar:"ecosystem-sidebar",previous:{title:"S3 Connector",permalink:"/zio-connect/s3-connector"},next:{title:"ZIO Crypto",permalink:"/zio-crypto/"}},l={},p=[{value:"Quick Start",id:"quick-start",level:2},{value:"Context",id:"context",level:2},{value:"Why not the Hughes schema?",id:"why-not-the-hughes-schema",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Allows you to build programs as mere descriptions with maximum polymorphism, maximum modularity, zero abstraction leakage, and zero casting."),(0,r.kt)("p",null,"It is ",(0,r.kt)("strong",{parentName:"p"},"a Scala take on the following paper in Haskell, on parametrising the program with logical constraints at every node, without compromising modularity")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://www.doc.ic.ac.uk/~wlj05/files/Deconstraining.pdf"},"http://www.doc.ic.ac.uk/~wlj05/files/Deconstraining.pdf")),(0,r.kt)("p",null,"An excerpt from the paper:"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},'"The key principle that underpins our idea is that implementation- specific constraints should be imposed at the point of use of a data type, not at the point of definition, i.e. it embodies the established principle that an interface should be separated from its implementation(s)."')),(0,r.kt)("h2",{id:"quick-start"},"Quick Start"),(0,r.kt)("p",null,"Example: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/afsalthaj/constraintless/blob/master/src/main/scala/thaj/constraintless/examples/Expr.scala"},"https://github.com/afsalthaj/constraintless/blob/master/src/main/scala/thaj/constraintless/examples/Expr.scala")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sbt"},'libraryDependencies += "io.github.afsalthaj" %% "constraintless" % "0.0.0+106-f043aafb+20221121-0804-SNAPSHOT"\n')),(0,r.kt)("h2",{id:"context"},"Context"),(0,r.kt)("p",null,'The key to many inspectable programs such as an execution planner, a configuration DSL etc is the basic concept of "programs as descriptions", but this idea comes with limitations.'),(0,r.kt)("p",null,"This description (or data) can easily turn out to be a Generalised ADT that can be recursive, such that compiler has to traverse through the unknown types (existential) and for the compiler to do any advanced/useful stuff with it, it needs to know more about these types."),(0,r.kt)("p",null,'The obvious implication of having to handle "unknown" is that, the data should hold on to informations as constraints (that are relevant to implementation) on types at the definition site. A possible solution is to compromise on parametric polymorphism, or fall back to relying unsafe/safe (relative) casting (asInstanceOf).'),(0,r.kt)("p",null,"This naive approach imposes modularity issues, and possible runtime crashes. The reasonsing and solution is given in the above paper, and this project solves the exact problem in scala."),(0,r.kt)("h2",{id:"why-not-the-hughes-schema"},"Why not the Hughes schema?"),(0,r.kt)("p",null,"It doesn't allow you to have a compiler with multiple constraints."),(0,r.kt)("p",null,"A few excerpts from the paper on why it doesn't work:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"class Typeable p a valueP :: a \u2192 p a\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"newtype SM a = SM {fromSM :: Int}\n\ninstance IntBool a \u21d2 Typeable SM a where\n  valueP = SM \xb7 toInt\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"\nnewtype Pretty a = Pretty {fromPretty :: String}\n\ninstance Show a \u21d2 Typeable Pretty a where valueP = Pretty \xb7 show\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"data Exp p a where\nValueE::Typeable p a \u21d2 a \u2192 Exp p a\n\nCondE ::Expp Bool\u2192Exp p a \u2192 Exp p a \u2192 Exp p a \n\nEqE :: Eq a \u21d2 Exp p a \u2192 Exp p a \u2192 Exp p Bool\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"pretty :: Exp Pretty a \u2192 String // works\ncompileSM :: Exp SM a \u2192 String // works\n\n\n")),(0,r.kt)("p",null,"However, now suppose that we wish to apply the two functions to the same expression, as in:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"f :: Exp p a \u2192 . . .\nf e = ...(compileSM e)...(pretty e)..\n")),(0,r.kt)("p",null,"and that's impossible"))}u.isMDXComponent=!0}}]);