"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[96248],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=i.createContext({}),s=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return i.createElement(c.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(t),m=r,g=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return t?i.createElement(g,o(o({ref:n},p),{},{components:t})):i.createElement(g,o({ref:n},p))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<a;s++)o[s]=t[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},74311:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var i=t(87462),r=(t(67294),t(3905));const a={id:"integrations",title:"Integrations"},o=void 0,l={unversionedId:"zio-config/integrations",id:"zio-config/integrations",title:"Integrations",description:"Integration with other libraries",source:"@site/docs/zio-config/integrations.md",sourceDirName:"zio-config",slug:"/zio-config/integrations",permalink:"/zio-config/integrations",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-config/integrations.md",tags:[],version:"current",frontMatter:{id:"integrations",title:"Integrations"},sidebar:"ecosystem-sidebar",previous:{title:"Dive Into ZIO Config",permalink:"/zio-config/dive-into-zio-config"},next:{title:"Automatic Derivation of Config",permalink:"/zio-config/automatic-derivation-of-config"}},c={},s=[{value:"Integration with other libraries",id:"integration-with-other-libraries",level:2},{value:"Enumeratum",id:"enumeratum",level:4},{value:"Scalaz/Cats",id:"scalazcats",level:4}],p={toc:s},u="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"integration-with-other-libraries"},"Integration with other libraries"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"zio-config")," is also integrated with ",(0,r.kt)("inlineCode",{parentName:"p"},"enumeratum"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"cats"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"scalaz")," etc apart from ",(0,r.kt)("inlineCode",{parentName:"p"},"refined")," which is used for automatic validations."),(0,r.kt)("h4",{id:"enumeratum"},"Enumeratum"),(0,r.kt)("p",null,"Many applications rely on this beautiful library ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/lloydmeta/enumeratum"},"https://github.com/lloydmeta/enumeratum"),".\nZio-config can directly load it from enumeratum's ",(0,r.kt)("inlineCode",{parentName:"p"},"enum")," without relying on auto-derivation (and rely on Enumeratum's macro indirectly witha additional features)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'\n sealed trait Greeting extends EnumEntry\n\n  object Greeting extends Enum[Greeting] {\n\n    val values = findValues\n\n    case object Hello extends Greeting\n    case object GoodBye extends Greeting\n    case object Hi extends Greeting\n    case object Bye extends Greeting\n\n  }\n\n\n  // Load using zio-config\n  import zio.config.enumeratum._\n\n  val mapProvider =\n    ConfigProvider.fromMap(Map(\n      "greeting" -> "Hello"\n    ))\n\n  val config =\n    `enum`(Greeting).nested("greeting")\n\n  val pgm: IO[Error, Greeting] =\n    mapProvider.load(config)\n    \n  // Returns Hello  \n    \n\n')),(0,r.kt)("h4",{id:"scalazcats"},"Scalaz/Cats"),(0,r.kt)("p",null,"Highly polymorphic code end up relying on\ntypeclasses, and zio-config provides instances for ",(0,r.kt)("inlineCode",{parentName:"p"},"Config"),"."),(0,r.kt)("p",null,"This is a simple example to showcase the capability."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'\n  import _root_.scalaz._, Scalaz._\n  import zio.config.scalaz.instances._\n\n // Across the application, there can be various effect types, but there is only one addition!\n def add[F[_]: Applicative, A: Monoid](primary: F[A], secondary: F[A]): F[A] =\n    primary.<*>(Applicative[F].map(secondary)(secondary => (primary: A) => primary.mappend(secondary)))\n    \n // Now even `Config` can take part in this addition given the values of config parameters should be Monoid,\n // instead of using native `zip` and separately implementing addition for various types\n val configResult = add(Config.int("marks1"), Config.int("marks2")))\n \n ConfigProvider.fromMap(Map("marks1" -> "10", "marks2" -> "20")).load(configResult) // returns 30\n \n\n')),(0,r.kt)("p",null,"In addition to it, it can also load cats/scalaz specific datatypes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'\n  import zio.config.scalaz._\n  import _root_.scalaz.Maybe\n\n  \n  val config: Config[Maybe[Int]] = maybe(Config.int("age"))\n  \n')))}d.isMDXComponent=!0}}]);