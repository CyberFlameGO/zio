"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[75426],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=o,y=c["".concat(d,".").concat(m)]||c[m]||u[m]||r;return n?a.createElement(y,i(i({ref:t},p),{},{components:n})):a.createElement(y,i({ref:t},p))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},53129:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(87462),o=(n(67294),n(3905));const r={sidebar_position:"5"},i="Body",l={unversionedId:"zio-http/v1.x/dsl/body",id:"zio-http/v1.x/dsl/body",title:"Body",description:"Body is a domain to model content for Request, Response and ClientRequest. ZIO HTTP uses Netty at it's core and Netty handles content as ByteBuf. Body helps you decode and encode this content into simpler, easier to use data types while creating a Request or Response.",source:"@site/docs/zio-http/v1.x/dsl/body.md",sourceDirName:"zio-http/v1.x/dsl",slug:"/zio-http/v1.x/dsl/body",permalink:"/zio-http/v1.x/dsl/body",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/v1.x/dsl/body.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5}},d={},s=[{value:"Server-side usage of <code>Body</code>",id:"server-side-usage-of-body",level:2},{value:"Client-side usage of <code>Body</code>",id:"client-side-usage-of-body",level:2},{value:"Creating an Body",id:"creating-an-body",level:2},{value:"Creating an Body from a <code>String</code>",id:"creating-an-body-from-a-string",level:3},{value:"Creating an Body from a <code>ByteBuf</code>",id:"creating-an-body-from-a-bytebuf",level:3},{value:"Creating an Body from <code>Chunk of Bytes</code>",id:"creating-an-body-from-chunk-of-bytes",level:3},{value:"Creating an Body from a <code>Stream</code>",id:"creating-an-body-from-a-stream",level:3},{value:"Creating an Body from a <code>File</code>",id:"creating-an-body-from-a-file",level:3},{value:"Converting <code>Body</code> to <code>ByteBuf</code>",id:"converting-body-to-bytebuf",level:2}],p={toc:s};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"body"},"Body"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Body")," is a domain to model content for ",(0,o.kt)("inlineCode",{parentName:"p"},"Request"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Response")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ClientRequest"),". ZIO HTTP uses Netty at it's core and Netty handles content as ",(0,o.kt)("inlineCode",{parentName:"p"},"ByteBuf"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"Body")," helps you decode and encode this content into simpler, easier to use data types while creating a Request or Response."),(0,o.kt)("h2",{id:"server-side-usage-of-body"},"Server-side usage of ",(0,o.kt)("inlineCode",{parentName:"h2"},"Body")),(0,o.kt)("p",null,"On the server-side, ",(0,o.kt)("inlineCode",{parentName:"p"},"ZIO-HTTP")," models content in ",(0,o.kt)("inlineCode",{parentName:"p"},"Request")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Response")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"Body")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"Body.Empty")," as the default value.\nTo add content while creating a ",(0,o.kt)("inlineCode",{parentName:"p"},"Response")," you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"Response")," constructor."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'  val res: Response = Response( body = Body.fromString("Some String"))\n')),(0,o.kt)("p",null,"To add content while creating a ",(0,o.kt)("inlineCode",{parentName:"p"},"Request")," for unit tests, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"Request")," constructor."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'  val req: Request = Request( body = Body.fromString("Some String"))\n')),(0,o.kt)("h2",{id:"client-side-usage-of-body"},"Client-side usage of ",(0,o.kt)("inlineCode",{parentName:"h2"},"Body")),(0,o.kt)("p",null,"On the client-side, ",(0,o.kt)("inlineCode",{parentName:"p"},"ZIO-HTTP")," models content in ",(0,o.kt)("inlineCode",{parentName:"p"},"ClientRequest")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"Body")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"Body.Empty")," as the default value.\nTo add content while making a request using ZIO HTTP you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"Client.request")," method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'  val actual: ZIO[EventLoopGroup with ChannelFactory, Throwable, Client.ClientResponse] = \n    Client.request("https://localhost:8073/success", content = Body.fromString("Some string"))\n')),(0,o.kt)("h2",{id:"creating-an-body"},"Creating an Body"),(0,o.kt)("h3",{id:"creating-an-body-from-a-string"},"Creating an Body from a ",(0,o.kt)("inlineCode",{parentName:"h3"},"String")),(0,o.kt)("p",null,"To create an ",(0,o.kt)("inlineCode",{parentName:"p"},"Body")," that encodes a String you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"Body.fromString"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'  val textHttpData: Body = Body.fromString("any string", CharsetUtil.UTF_8)\n')),(0,o.kt)("h3",{id:"creating-an-body-from-a-bytebuf"},"Creating an Body from a ",(0,o.kt)("inlineCode",{parentName:"h3"},"ByteBuf")),(0,o.kt)("p",null,"To create an ",(0,o.kt)("inlineCode",{parentName:"p"},"Body")," that encodes a ByteBuf you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"Body.fromByteBuf"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'  val binaryByteBufHttpData: Body = Body.fromByteBuf(Unpooled.copiedBuffer("Some string", CharsetUtil.UTF_8))\n')),(0,o.kt)("h3",{id:"creating-an-body-from-chunk-of-bytes"},"Creating an Body from ",(0,o.kt)("inlineCode",{parentName:"h3"},"Chunk of Bytes")),(0,o.kt)("p",null,"To create an ",(0,o.kt)("inlineCode",{parentName:"p"},"Body")," that encodes chunk of bytes you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"Body.fromChunk"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'  val chunkHttpData: Body = Body.fromChunk(Chunk.fromArray("Some Sting".getBytes(CharsetUtil.UTF_8)))\n')),(0,o.kt)("h3",{id:"creating-an-body-from-a-stream"},"Creating an Body from a ",(0,o.kt)("inlineCode",{parentName:"h3"},"Stream")),(0,o.kt)("p",null,"To create an ",(0,o.kt)("inlineCode",{parentName:"p"},"Body")," that encodes a Stream you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"Body.fromStream"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Using a Stream of Bytes")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'  val streamHttpData: Body = Body.fromStream(ZStream.fromChunk(Chunk.fromArray("Some String".getBytes(HTTP_CHARSET))))\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Using a Stream of String")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'  val streamHttpData: Body = Body.fromStream(ZStream("a", "b", "c"), CharsetUtil.UTF_8)\n')),(0,o.kt)("h3",{id:"creating-an-body-from-a-file"},"Creating an Body from a ",(0,o.kt)("inlineCode",{parentName:"h3"},"File")),(0,o.kt)("p",null,"To create an ",(0,o.kt)("inlineCode",{parentName:"p"},"Body")," that encodes a File you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"Body.fromFile"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'  val fileHttpData: Body = Body.fromFile(new io.File(getClass.getResource("/fileName.txt").getPath))\n')),(0,o.kt)("h2",{id:"converting-body-to-bytebuf"},"Converting ",(0,o.kt)("inlineCode",{parentName:"h2"},"Body")," to ",(0,o.kt)("inlineCode",{parentName:"h2"},"ByteBuf")),(0,o.kt)("p",null,"To convert an ",(0,o.kt)("inlineCode",{parentName:"p"},"Body")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"ByteBuf"),"  you can call the ",(0,o.kt)("inlineCode",{parentName:"p"},"toButeBuf")," method on it, which returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"Task[ByteBuf]"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'  val textHttpData: Body = Body.fromString("any string", CharsetUtil.UTF_8)\n  val textByteBuf: Task[ByteBuf] = textHttpData.toByteBuf\n')))}c.isMDXComponent=!0}}]);