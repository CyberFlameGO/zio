"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[62570],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,f=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},15354:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={id:"index",title:"Summary"},i=void 0,l={unversionedId:"zio-prelude/functionaldatatypes/index",id:"zio-prelude/functionaldatatypes/index",title:"Summary",description:"ZIO Prelude includes several data types to help us model our domains more accurately and solve common problems.",source:"@site/docs/zio-prelude/functionaldatatypes/index.md",sourceDirName:"zio-prelude/functionaldatatypes",slug:"/zio-prelude/functionaldatatypes/",permalink:"/zio-prelude/functionaldatatypes/",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-prelude/functionaldatatypes/index.md",tags:[],version:"current",frontMatter:{id:"index",title:"Summary"},sidebar:"ecosystem-sidebar",previous:{title:"NonEmptyForEach",permalink:"/zio-prelude/functionalabstractions/parameterizedtypes/nonemptyforeach"},next:{title:"Equivalence",permalink:"/zio-prelude/functionaldatatypes/equivalence"}},s={},p=[],u={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"ZIO Prelude includes several data types to help us model our domains more accurately and solve common problems."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"/zio-prelude/functionaldatatypes/equivalence"},"Equivalence"))," - A description of an equivalence relationship between two data types."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"/zio-prelude/functionaldatatypes/nonemptylist"},"NonEmptyList"))," - A list that is guaranteed to be non-empty to more accurately model situations where we know a collection has at least one element."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"/zio-prelude/functionaldatatypes/these"},"These"))," - A data type that may either be a ",(0,r.kt)("inlineCode",{parentName:"li"},"Left")," with an ",(0,r.kt)("inlineCode",{parentName:"li"},"A"),", a ",(0,r.kt)("inlineCode",{parentName:"li"},"Right")," with a ",(0,r.kt)("inlineCode",{parentName:"li"},"B"),", or a ",(0,r.kt)("inlineCode",{parentName:"li"},"Both")," with an ",(0,r.kt)("inlineCode",{parentName:"li"},"A")," and a ",(0,r.kt)("inlineCode",{parentName:"li"},"B"),", useful for modeling problems such as merging streams of data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"/zio-prelude/functionaldatatypes/validation"},"Validation"))," - A data type that may be either a success or an accumulation of one or more errors, allowing modeling multiple failures for applications such as data validation."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"/zio-prelude/functionaldatatypes/zset"},"ZSet")),' - A generalization of a set that generalizes measures of "how many" of an element exist in a set, supporting multi-sets, "fuzzy" sets, and other data structures.'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"/zio-prelude/functionaldatatypes/zvalidation"},"ZValidation"))," - A generalization of ",(0,r.kt)("inlineCode",{parentName:"li"},"Validation")," that allows maintaining a log of warnings in addition to accumulating errors.")))}c.isMDXComponent=!0}}]);