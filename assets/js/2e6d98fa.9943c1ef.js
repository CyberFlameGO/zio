"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[80132],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,g=m["".concat(p,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(g,o(o({ref:t},c),{},{components:n})):r.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},99440:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const i={id:"opentelemetry",title:"OpenTelemetry"},o=void 0,l={unversionedId:"zio-telemetry/opentelemetry",id:"zio-telemetry/opentelemetry",title:"OpenTelemetry",description:"OpenTelemetry is a collection of tools, APIs, and SDKs. You can use it to instrument, generate, collect, and export telemetry data for analysis in order to understand your software's performance and behavior. Well known implementations are Jaeger",source:"@site/docs/zio-telemetry/opentelemetry.md",sourceDirName:"zio-telemetry",slug:"/zio-telemetry/opentelemetry",permalink:"/zio-telemetry/opentelemetry",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-telemetry/opentelemetry.md",tags:[],version:"current",frontMatter:{id:"opentelemetry",title:"OpenTelemetry"},sidebar:"ecosystem-sidebar",previous:{title:"OpenCensus",permalink:"/zio-telemetry/opencensus"},next:{title:"OpenTelemetry Example",permalink:"/zio-telemetry/opentelemetry-example"}},p={},s=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Experimental Usage with OpenTelemetry automatic instrumentation",id:"experimental-usage-with-opentelemetry-automatic-instrumentation",level:3}],c={toc:s},m="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"OpenTelemetry is a collection of tools, APIs, and SDKs. You can use it to instrument, generate, collect, and export telemetry data for analysis in order to understand your software's performance and behavior. Well known implementations are ",(0,a.kt)("a",{parentName:"p",href:"https://www.jaegertracing.io"},"Jaeger"),"\nand ",(0,a.kt)("a",{parentName:"p",href:"https://www.zipkin.io"},"Zipkin"),"."),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"First, add the following dependency to your build.sbt:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'"dev.zio" %% "zio-opentelemetry" % "3.0.0-RC1"\n')),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"To use ZIO Telemetry, you will need a ",(0,a.kt)("inlineCode",{parentName:"p"},"Tracing")," service in your environment. You also need to provide a ",(0,a.kt)("inlineCode",{parentName:"p"},"tracer"),"\n(for this example we use ",(0,a.kt)("inlineCode",{parentName:"p"},"JaegerTracer.live")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"opentelemetry-example")," module) implementation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.telemetry.opentelemetry.Tracing\nimport zio.telemetry.opentelemetry.example.JaegerTracer\nimport io.opentelemetry.api.trace.{ SpanKind, StatusCode }\nimport zio._\n\nval errorMapper = ErrorMapper[Throwable]{ case _ => StatusCode.UNSET }\n\nval app =\n  ZIO.serviceWithZIO[Tracing] { tracing =>\n    import tracing.aspects._\n\n    (for {\n      //sets an attribute to the current span\n      _       <- tracing.setAttribute("foo", "bar")\n      //adds an event to the current span\n      _       <- tracing.addEvent("foo")\n      message <- Console.readline\n      _       <- tracing.addEvent("bar")\n    } yield message) @@ root("root span", SpanKind.INTERNAL, errorMapper)\n  }.provide(Tracing.live, JaegerTracer.live)\n')),(0,a.kt)("p",null,"After importing ",(0,a.kt)("inlineCode",{parentName:"p"},"import tracing.aspects._"),", additional ",(0,a.kt)("inlineCode",{parentName:"p"},"ZIOAspect")," combinators\non ",(0,a.kt)("inlineCode",{parentName:"p"},"ZIO"),"s are available to support starting child spans, adding events and setting attributes."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'ZIO.serviceWithZIO[Tracing] { tracing => \n  import tracing.aspects._\n  \n  // start a new root span and set some attribute\n  val zio1 = ZIO.unit @@\n    setAttribute("foo", "bar") @@\n    root("root span")\n\n  // start a child of the current span, set an attribute and add an event\n  val zio2 = ZIO.unit @@\n    setAttribute("http.status_code", 200) @@\n    addEvent("doing some serious work here!") @@\n    span("child span")\n}\n')),(0,a.kt)("p",null,"To propagate contexts across process boundaries, extraction and injection can be\nused. The current span context is injected into a carrier, which is passed\nthrough some side channel to the next process. There it is injected back and a\nchild span of it is started."),(0,a.kt)("p",null,"Due to the use of the (mutable) OpenTelemetry carrier APIs, injection and extraction\nare not referentially transparent."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'ZIO.serviceWithZIO[Tracing] { tracing =>\n  import tracing.aspects._\n  \n  val propagator                           = W3CTraceContextPropagator.getInstance()\n  val carrier: mutable.Map[String, String] = mutable.Map().empty\n\n  val getter: TextMapGetter[mutable.Map[String, String]] = new TextMapGetter[mutable.Map[String, String]] {\n    override def keys(carrier: mutable.Map[String, String]): lang.Iterable[String] =\n      carrier.keys.asJava\n\n    override def get(carrier: mutable.Map[String, String], key: String): String =\n      carrier.get(key).orNull\n  }\n\n  val setter: TextMapSetter[mutable.Map[String, String]] =\n    (carrier, key, value) => carrier.update(key, value)\n  \n  tracing.inject(propagator, carrier, setter) @@ span("foo") *> \n    ZIO.unit @@ spanFrom(propagator, carrier, getter, "baz") @@ span("bar")\n}\n')),(0,a.kt)("h3",{id:"experimental-usage-with-opentelemetry-automatic-instrumentation"},"[Experimental]"," Usage with OpenTelemetry automatic instrumentation"),(0,a.kt)("p",null,"OpenTelemetry provides\na ",(0,a.kt)("a",{parentName:"p",href:"https://opentelemetry.io/docs/instrumentation/java/automatic/"},"JVM agent for automatic instrumentation")," which\nsupports\nmany ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/main/docs/supported-libraries.md"},"popular Java libraries"),"\n."),(0,a.kt)("p",null,"This automatic instrumentation relies on the default OpenTelemetry context storage which is based on ",(0,a.kt)("inlineCode",{parentName:"p"},"ThreadLocal"),". So\nit doesn't work with ZIO out of the box."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"zio-opentelemetry")," provides an experimental version of ",(0,a.kt)("inlineCode",{parentName:"p"},"Tracing")," which bidirectionally propagates tracing context\nbetween ZIO and non-ZIO code, enabling interoperability with ",(0,a.kt)("em",{parentName:"p"},"most")," libraries that use the default OpenTelemetry context\nstorage."),(0,a.kt)("p",null,"To enable this experimental propagation, you will need to create ",(0,a.kt)("inlineCode",{parentName:"p"},"Tracing")," using ",(0,a.kt)("inlineCode",{parentName:"p"},"Tracing.propagating")," constructor (\ninstead of ",(0,a.kt)("inlineCode",{parentName:"p"},"Tracing.live"),")."),(0,a.kt)("p",null,"Please note that whether context propagation will work correctly depends on which specific ZIO wrappers around non-ZIO\nlibraries you are using. So please, test your specific setup."),(0,a.kt)("p",null,"It was reported that it works with:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"zhttp")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"sttp")," with Java 11+ HTTP client backend"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"zio-kafka")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"doobie")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"redis4cats"))),(0,a.kt)("p",null,"It was reported that it does not work with:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"sttp")," with ",(0,a.kt)("inlineCode",{parentName:"li"},"armeria")," backend")))}u.isMDXComponent=!0}}]);