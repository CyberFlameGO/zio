"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[49296],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),f=o,y=u["".concat(c,".").concat(f)]||u[f]||d[f]||a;return n?r.createElement(y,i(i({ref:t},p),{},{components:n})):r.createElement(y,i({ref:t},p))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},17565:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(87462),o=(n(67294),n(3905));const a={id:"zio-rocksdb",title:"ZIO RocksDB"},i=void 0,s={unversionedId:"ecosystem/officials/zio-rocksdb",id:"ecosystem/officials/zio-rocksdb",title:"ZIO RocksDB",description:"ZIO RocksDB is a ZIO-based interface to RocksDB.",source:"@site/docs/ecosystem/officials/zio-rocksdb.md",sourceDirName:"ecosystem/officials",slug:"/ecosystem/officials/zio-rocksdb",permalink:"/ecosystem/officials/zio-rocksdb",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/ecosystem/officials/zio-rocksdb.md",tags:[],version:"current",frontMatter:{id:"zio-rocksdb",title:"ZIO RocksDB"}},c={},l=[{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2}],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/zio/zio-rocksdb"},"ZIO RocksDB")," is a ZIO-based interface to RocksDB."),(0,o.kt)("p",null,"Rocksdb is an embeddable persistent key-value store that is optimized for fast storage. ZIO RocksDB provides us a functional ZIO wrapper around its Java API."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"In order to use this library, we need to add the following line in our ",(0,o.kt)("inlineCode",{parentName:"p"},"build.sbt")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "dev.zio" %% "zio-rocksdb" % "0.3.0" \n')),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"An example of writing and reading key/value pairs and also using transactional operations when using RocksDB:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.console._\nimport zio.rocksdb.{RocksDB, Transaction, TransactionDB}\nimport zio.{URIO, ZIO}\n\nimport java.nio.charset.StandardCharsets._\n\nobject ZIORocksDBExample extends zio.App {\n\n  private def bytesToString(bytes: Array[Byte]): String = new String(bytes, UTF_8)\n  private def bytesToInt(bytes: Array[Byte]): Int = bytesToString(bytes).toInt\n\n  val job1: ZIO[Console with RocksDB, Throwable, Unit] =\n    for {\n      _ <- RocksDB.put(\n        "Key".getBytes(UTF_8),\n        "Value".getBytes(UTF_8)\n      )\n      result <- RocksDB.get("Key".getBytes(UTF_8))\n      stringResult = result.map(bytesToString)\n      _ <- putStrLn(s"value: $stringResult")\n    } yield ()\n\n\n  val job2: ZIO[Console with TransactionDB, Throwable, Unit] =\n    for {\n      key <- ZIO.succeed("COUNT".getBytes(UTF_8))\n      _ <- TransactionDB.put(key, 0.toString.getBytes(UTF_8))\n      _ <- ZIO.foreachPar(0 until 10) { _ =>\n        TransactionDB.atomically {\n          Transaction.getForUpdate(key, exclusive = true) >>= { iCount =>\n            Transaction.put(key, iCount.map(bytesToInt).map(_ + 1).getOrElse(-1).toString.getBytes(UTF_8))\n          }\n        }\n      }\n      value <- TransactionDB.get(key)\n      counterValue = value.map(bytesToInt)\n      _ <- putStrLn(s"The value of counter: $counterValue") // Must be 10\n    } yield ()\n\n  private val transactional_db =\n    TransactionDB.live(new org.rocksdb.Options().setCreateIfMissing(true), "tr_db")\n\n  private val rocks_db =\n    RocksDB.live(new org.rocksdb.Options().setCreateIfMissing(true), "rocks_db")\n\n  override def run(args: List[String]): URIO[zio.ZEnv, Int] =\n    (job1 <*> job2)\n      .provideCustom(transactional_db ++ rocks_db)\n      .foldCauseZIO(cause => putStrLn(cause.prettyPrint) *> ZIO.succeed(1), _ => ZIO.succeed(0))\n}\n')))}d.isMDXComponent=!0}}]);