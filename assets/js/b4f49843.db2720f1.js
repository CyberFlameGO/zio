"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[41174],{3905:(e,n,o)=>{o.d(n,{Zo:()=>p,kt:()=>u});var t=o(67294);function r(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function a(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function i(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?a(Object(o),!0).forEach((function(n){r(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function l(e,n){if(null==e)return{};var o,t,r=function(e,n){if(null==e)return{};var o,t,r={},a=Object.keys(e);for(t=0;t<a.length;t++)o=a[t],n.indexOf(o)>=0||(r[o]=e[o]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)o=a[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=t.createContext({}),g=function(e){var n=t.useContext(s),o=n;return e&&(o="function"==typeof e?e(n):i(i({},n),e)),o},p=function(e){var n=g(e.components);return t.createElement(s.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var o=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=g(o),m=r,u=d["".concat(s,".").concat(m)]||d[m]||c[m]||a;return o?t.createElement(u,i(i({ref:n},p),{},{components:o})):t.createElement(u,i({ref:n},p))}));function u(e,n){var o=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=o.length,i=new Array(a);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var g=2;g<a;g++)i[g]=o[g];return t.createElement.apply(null,i)}return t.createElement.apply(null,o)}m.displayName="MDXCreateElement"},41058:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>g});var t=o(87462),r=(o(67294),o(3905));const a={id:"console-logger",title:"Console Logger"},i=void 0,l={unversionedId:"zio-logging/console-logger",id:"zio-logging/console-logger",title:"Console Logger",description:"Colorful Console Logger With Log Filtering",source:"@site/docs/zio-logging/console-logger.md",sourceDirName:"zio-logging",slug:"/zio-logging/console-logger",permalink:"/zio-logging/console-logger",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-logging/console-logger.md",tags:[],version:"current",frontMatter:{id:"console-logger",title:"Console Logger"},sidebar:"ecosystem-sidebar",previous:{title:"Log Filter",permalink:"/zio-logging/log-filter"},next:{title:"Java Platform/System Logger",permalink:"/zio-logging/jpl"}},s={},g=[{value:"Colorful Console Logger With Log Filtering",id:"colorful-console-logger-with-log-filtering",level:2},{value:"JSON Console Logger",id:"json-console-logger",level:2}],p={toc:g},d="wrapper";function c(e){let{components:n,...o}=e;return(0,r.kt)(d,(0,t.Z)({},p,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"colorful-console-logger-with-log-filtering"},"Colorful Console Logger With Log Filtering"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'package zio.logging.example\n\nimport zio.logging.{ LogFilter, LogFormat, console }\nimport zio.{ Cause, ExitCode, LogLevel, Runtime, Scope, URIO, ZIO, ZIOAppArgs, ZIOAppDefault, ZLayer }\n\nobject ConsoleColoredApp extends ZIOAppDefault {\n\n  override val bootstrap: ZLayer[ZIOAppArgs, Any, Any] =\n    Runtime.removeDefaultLoggers >>> console(\n      LogFormat.colored,\n      LogFilter\n        .logLevelByName(\n          LogLevel.Info,\n          "zio.logging.example.LivePingService" -> LogLevel.Debug\n        )\n        .cached\n    )\n\n  private def ping(address: String): URIO[PingService, Unit] =\n    PingService\n      .ping(address)\n      .foldZIO(\n        e => ZIO.logErrorCause(s"ping: $address - error", Cause.fail(e)),\n        r => ZIO.logInfo(s"ping: $address - result: $r")\n      )\n\n  override def run: ZIO[Scope, Any, ExitCode] =\n    (for {\n      _ <- ping("127.0.0.1")\n      _ <- ping("x8.8.8.8")\n    } yield ExitCode.success).provide(LivePingService.layer)\n\n}\n')),(0,r.kt)("p",null,"Expected console output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'timestamp=2022-10-28T21:12:07.313782+02:00 level=DEBUG thread=zio-fiber-6 message="ping: /127.0.0.1"\ntimestamp=2022-10-28T21:12:07.326911+02:00 level=INFO thread=zio-fiber-6 message="ping: 127.0.0.1 - result: true"\ntimestamp=2022-10-28T21:12:07.348939+02:00 level=ERROR thread=zio-fiber-6 message="ping: x8.8.8.8 - invalid address error" cause=Exception in thread "zio-fiber-6" java.net.UnknownHostException: java.net.UnknownHostException: x8.8.8.8: nodename nor servname provided, or not known\n    at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)\n    at java.net.InetAddress$PlatformNameService.lookupAllHostAddr(InetAddress.java:929)\n    at java.net.InetAddress.getAddressesFromNameService(InetAddress.java:1529)\n    at java.net.InetAddress$NameServiceAddresses.get(InetAddress.java:848)\n    at java.net.InetAddress.getAllByName0(InetAddress.java:1519)\n    at java.net.InetAddress.getAllByName(InetAddress.java:1378)\n    at java.net.InetAddress.getAllByName(InetAddress.java:1306)\n    at java.net.InetAddress.getByName(InetAddress.java:1256)\n    at zio.logging.example.LivePingService.ping(PingService.scala:35)\n    at zio.logging.example.LivePingService.ping(PingService.scala:36)\n    at zio.logging.example.LivePingService.ping(PingService.scala:33)\n    at zio.logging.example.ConsoleColoredApp.ping(ConsoleColoredApp.scala:37)\n    at zio.logging.example.ConsoleColoredApp.run(ConsoleColoredApp.scala:45)\n    at zio.logging.example.ConsoleColoredApp.run(ConsoleColoredApp.scala:46)\ntimestamp=2022-10-28T21:12:07.357647+02:00 level=ERROR thread=zio-fiber-6 message="ping: x8.8.8.8 - error" cause=Exception in thread "zio-fiber-" java.net.UnknownHostException: java.net.UnknownHostException: x8.8.8.8: nodename nor servname provided, or not known\n')),(0,r.kt)("h2",{id:"json-console-logger"},"JSON Console Logger"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'package zio.logging.example\n\nimport zio.logging.{ LogAnnotation, LogFormat, consoleJson }\nimport zio.{ ExitCode, Runtime, Scope, ZIO, ZIOAppDefault, _ }\n\nimport java.util.UUID\n\nobject ConsoleJsonApp extends ZIOAppDefault {\n\n  private val userLogAnnotation = LogAnnotation[UUID]("user", (_, i) => i, _.toString)\n\n  override val bootstrap: ZLayer[ZIOAppArgs, Any, Any] =\n    Runtime.removeDefaultLoggers >>> consoleJson(\n      LogFormat.default + LogFormat.annotation(LogAnnotation.TraceId) + LogFormat.annotation(\n        userLogAnnotation\n      )\n    )\n\n  private val users = List.fill(2)(UUID.randomUUID())\n\n  override def run: ZIO[Scope, Any, ExitCode] =\n    (for {\n      traceId <- ZIO.succeed(UUID.randomUUID())\n      _       <- ZIO.foreachPar(users) { uId =>\n        {\n          ZIO.logInfo("Starting operation") *>\n            ZIO.sleep(500.millis) *>\n            ZIO.logInfo("Stopping operation")\n        } @@ userLogAnnotation(uId)\n      } @@ LogAnnotation.TraceId(traceId)\n      _       <- ZIO.logInfo("Done")\n    } yield ExitCode.success)\n\n}\n')),(0,r.kt)("p",null,"Expected console output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{"timestamp":"2022-10-28T13:48:20.350244+02:00","level":"INFO","thread":"zio-fiber-8","message":"Starting operation","trace_id":"674a118e-2944-46a7-8db2-ceb79d91d51d","user":"b4cf9c71-5b1d-4fe1-bfb4-35a6e51483b2"}\n{"timestamp":"2022-10-28T13:48:20.350238+02:00","level":"INFO","thread":"zio-fiber-7","message":"Starting operation","trace_id":"674a118e-2944-46a7-8db2-ceb79d91d51d","user":"372071a6-a643-452b-a07c-d0966e556bfa"}\n{"timestamp":"2022-10-28T13:48:20.899453+02:00","level":"INFO","thread":"zio-fiber-7","message":"Stopping operation","trace_id":"674a118e-2944-46a7-8db2-ceb79d91d51d","user":"372071a6-a643-452b-a07c-d0966e556bfa"}\n{"timestamp":"2022-10-28T13:48:20.899453+02:00","level":"INFO","thread":"zio-fiber-8","message":"Stopping operation","trace_id":"674a118e-2944-46a7-8db2-ceb79d91d51d","user":"b4cf9c71-5b1d-4fe1-bfb4-35a6e51483b2"}\n{"timestamp":"2022-10-28T13:48:20.908254+02:00","level":"INFO","thread":"zio-fiber-6","message":"Done"}\n')))}c.isMDXComponent=!0}}]);