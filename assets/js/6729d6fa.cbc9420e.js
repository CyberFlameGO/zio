"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[8495],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(t),f=i,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||a;return t?r.createElement(m,o(o({ref:n},u),{},{components:t})):r.createElement(m,o({ref:n},u))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},11800:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=t(87462),i=(t(67294),t(3905));const a={id:"overview_handling_resources",title:"Handling Resources"},o=void 0,l={unversionedId:"overview/overview_handling_resources",id:"overview/overview_handling_resources",title:"Handling Resources",description:"Ensuring that your applications never leak resources is one of the keys to maximizing application throughput, minimizing latency, and maximizing per-node uptime.",source:"@site/docs/overview/handling_resources.md",sourceDirName:"overview",slug:"/overview/overview_handling_resources",permalink:"/overview/overview_handling_resources",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/overview/handling_resources.md",tags:[],version:"current",frontMatter:{id:"overview_handling_resources",title:"Handling Resources"},sidebar:"overview_sidebar",previous:{title:"Handling Errors",permalink:"/overview/overview_handling_errors"},next:{title:"Basic Concurrency",permalink:"/overview/overview_basic_concurrency"}},s={},c=[{value:"Finalizing",id:"finalizing",level:2},{value:"Acquire Release",id:"acquire-release",level:2},{value:"Next Steps",id:"next-steps",level:2}],u={toc:c};function p(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Ensuring that your applications never leak resources is one of the keys to maximizing application throughput, minimizing latency, and maximizing per-node uptime."),(0,i.kt)("p",null,"Yet, achieving resource safety in the presence of asynchronous operations, concurrency, and ZIO's interruption model (which will automatically cancel running effects anytime their results will no longer be used) is challenging."),(0,i.kt)("p",null,"In this section, you will learn a few of the tools that ZIO provides to create safe applications that never leak resources, even in the case of failure, interruption, or defects in your application."),(0,i.kt)("h2",{id:"finalizing"},"Finalizing"),(0,i.kt)("p",null,"In many languages, the ",(0,i.kt)("inlineCode",{parentName:"p"},"try")," / ",(0,i.kt)("inlineCode",{parentName:"p"},"finally")," construct provides a language-level way to guarantee that when the ",(0,i.kt)("inlineCode",{parentName:"p"},"try")," code exits, either normally or abnormally, the ",(0,i.kt)("em",{parentName:"p"},"finalizer")," code in the ",(0,i.kt)("inlineCode",{parentName:"p"},"finally")," block will be executed."),(0,i.kt)("p",null,"ZIO provides a version of this with the ",(0,i.kt)("inlineCode",{parentName:"p"},"ZIO#ensuring")," method, whose guarantees hold across concurrent and async effects. ZIO goes one step further in automatically and losslessly aggregating errors from finalizers."),(0,i.kt)("p",null,"As with ",(0,i.kt)("inlineCode",{parentName:"p"},"try")," / ",(0,i.kt)("inlineCode",{parentName:"p"},"finally"),", the ",(0,i.kt)("inlineCode",{parentName:"p"},"ensuring")," method guarantees if the effect it is called on begins executing and terminates (either normally or abnormally), then the finalizer will begin execution."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'val finalizer: UIO[Unit] = \n  ZIO.succeed(println("Finalizing!"))\n// finalizer: UIO[Unit] = Sync(\n//   trace = "repl.MdocSession.App.finalizer(handling_resources.md:15)",\n//   eval = <function0>\n// )\n\nval finalized: IO[String, Unit] = \n  ZIO.fail("Failed!").ensuring(finalizer)\n// finalized: IO[String, Unit] = DynamicNoBox(\n//   trace = "repl.MdocSession.App.finalized(handling_resources.md:19)",\n//   update = 1L,\n//   f = zio.ZIO$$$Lambda$14086/0x0000000803031ef8@39ed4dfe\n// )\n')),(0,i.kt)("p",null,"In ZIO, finalizers are not allowed to fail in any recoverable way, which means that you must handle all of the errors that your code can produce."),(0,i.kt)("p",null,"Like ",(0,i.kt)("inlineCode",{parentName:"p"},"try")," / ",(0,i.kt)("inlineCode",{parentName:"p"},"finally"),", finalizers can be nested, and the failure of any inner finalizer will not affect outer finalizers. Nested finalizers will be executed in reverse order and sequentially, with later finalizers executed only after earlier finalizers."),(0,i.kt)("h2",{id:"acquire-release"},"Acquire Release"),(0,i.kt)("p",null,"A common use for ",(0,i.kt)("inlineCode",{parentName:"p"},"try")," is safely acquiring and releasing resources, such as new socket connections or opened files:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"val handle = openFile(name)\n\ntry {\n  processFile(handle)\n} finally closeFile(handle)\n")),(0,i.kt)("p",null,"ZIO encapsulates this common pattern with ",(0,i.kt)("inlineCode",{parentName:"p"},"ZIO.acquireReleaseWith"),", which allows you to specify an ",(0,i.kt)("em",{parentName:"p"},"acquire")," effect, which acquires a resource; a ",(0,i.kt)("em",{parentName:"p"},"release function"),", which returns an effect to release the resource; and a ",(0,i.kt)("em",{parentName:"p"},"use function"),", which returns an effect that ",(0,i.kt)("em",{parentName:"p"},"uses")," the resource."),(0,i.kt)("p",null,"So long as the acquire effect succeeds, the release effect is guaranteed to be executed by the runtime system, even in the presence of errors or interruption."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'val groupedFileData: IO[IOException, Unit] = \n  ZIO.acquireReleaseWith(openFile("data.json"))(closeFile(_)) { file =>\n    for {\n      data    <- decodeData(file)\n      grouped <- groupData(data)\n    } yield grouped\n  }\n')),(0,i.kt)("p",null,"Like ",(0,i.kt)("inlineCode",{parentName:"p"},"ensuring"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"acquireReleaseWith")," has compositional semantics, so if one ",(0,i.kt)("inlineCode",{parentName:"p"},"acquireReleaseWith")," is nested inside another ",(0,i.kt)("inlineCode",{parentName:"p"},"acquireReleaseWith"),", and the outer resource is acquired, then the outer release will always be called, even if, for example, the inner release fails."),(0,i.kt)("h2",{id:"next-steps"},"Next Steps"),(0,i.kt)("p",null,"If you are comfortable with basic resource handling, the next step is to learn about ",(0,i.kt)("a",{parentName:"p",href:"/overview/overview_basic_concurrency"},"basic concurrency"),"."))}p.isMDXComponent=!0}}]);