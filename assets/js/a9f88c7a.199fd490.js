"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[98432],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},49401:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={id:"index",title:"Introduction to ZIO Schema",sidebar_label:"Introduction"},i=void 0,s={unversionedId:"index",id:"index",title:"Introduction to ZIO Schema",description:"ZIO Schema is a ZIO-based library for modeling the schema of data structures as first-class values.",source:"@site/node_modules/@zio.dev/zio-schema/index.md",sourceDirName:".",slug:"/",permalink:"/zio-schema/",draft:!1,tags:[],version:"current",frontMatter:{id:"index",title:"Introduction to ZIO Schema",sidebar_label:"Introduction"},sidebar:"sidebar",next:{title:"Use cases",permalink:"/zio-schema/use-cases"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2},{value:"Resources",id:"resources",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/zio/zio-schema"},"ZIO Schema")," is a ",(0,r.kt)("a",{parentName:"p",href:"https://zio.dev"},"ZIO"),"-based library for modeling the schema of data structures as first-class values."),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Schema is a structure of a data type. ZIO Schema reifies the concept of structure for data types. It makes a high-level description of any data type and makes them as first-class values."),(0,r.kt)("p",null,"Creating a schema for a data type helps us to write codecs for that data type. So this library can be a host of functionalities useful for writing codecs and protocols like JSON, Protobuf, CSV, and so forth."),(0,r.kt)("p",null,"With schema descriptions that can be automatically derived for case classes and sealed traits, ",(0,r.kt)("em",{parentName:"p"},"ZIO Schema")," will be going to provide powerful features for free (Note that the project is in the development stage and all these features are not supported yet):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Codecs for any supported protocol (JSON, protobuf, etc.), so data structures can be serialized and deserialized in a principled way"),(0,r.kt)("li",{parentName:"ul"},"Diffing, patching, merging, and other generic-data-based operations"),(0,r.kt)("li",{parentName:"ul"},"Migration of data structures from one schema to another compatible schema"),(0,r.kt)("li",{parentName:"ul"},"Derivation of arbitrary type classes (",(0,r.kt)("inlineCode",{parentName:"li"},"Eq"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Show"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Ord"),", etc.) from the structure of the data")),(0,r.kt)("p",null,"When our data structures need to be serialized, deserialized, persisted, or transported across the wire, then ",(0,r.kt)("em",{parentName:"p"},"ZIO Schema")," lets us focus on data modeling and automatically tackle all the low-level, messy details for us."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"In order to use this library, we need to add the following lines in our ",(0,r.kt)("inlineCode",{parentName:"p"},"build.sbt")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "dev.zio" %% "zio-schema" % "0.2.1"\nlibraryDependencies += "dev.zio" %% "zio-schema-json" % "0.2.1"\nlibraryDependencies += "dev.zio" %% "zio-schema-protobuf" % "0.2.1"\n')),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"In this simple example first, we create a schema for ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," and then run the ",(0,r.kt)("em",{parentName:"p"},"diff")," operation on two instances of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," data type, and finally we encode a Person instance using ",(0,r.kt)("em",{parentName:"p"},"Protobuf")," protocol:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.console.putStrLn\nimport zio.schema.codec.ProtobufCodec._\nimport zio.schema.{DeriveSchema, Schema}\nimport zio.stream.ZStream\nimport zio.{Chunk, ExitCode, URIO}\n\nfinal case class Person(name: String, age: Int, id: String)\nobject Person {\n  implicit val schema: Schema[Person] = DeriveSchema.gen[Person]\n}\n\nPerson.schema\n\nimport zio.schema.syntax._\n\nPerson("Alex", 31, "0123").diff(Person("Alex", 31, "124"))\n\ndef toHex(chunk: Chunk[Byte]): String =\n  chunk.toArray.map("%02X".format(_)).mkString\n\nzio.Runtime.default.unsafe.run(\n  ZStream\n    .succeed(Person("Thomas", 23, "2354"))\n    .transduce(\n      encoder(Person.schema)\n    )\n    .runCollect\n    .flatMap(x => putStrLn(s"Encoded data with protobuf codec: ${toHex(x)}"))\n).getOrThrowFiberFailure()\n')),(0,r.kt)("h2",{id:"resources"},"Resources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=GfNiDaL5aIM"},"Zymposium - ZIO Schema")," by John A. De Goes, Adam Fraser and Kit Langton (May 2021)")))}p.isMDXComponent=!0}}]);