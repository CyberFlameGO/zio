"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[4146],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),c=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},g="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),g=c(n),u=o,f=g["".concat(p,".").concat(u)]||g[u]||m[u]||r;return n?a.createElement(f,i(i({ref:t},s),{},{components:n})):a.createElement(f,i({ref:t},s))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[g]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},41680:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>g,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const r={id:"config-descriptor-usage",title:"Using ConfigDescriptor for Read, Write, Document and Report",sidebar_label:"ConfigDescriptor Usage"},i=void 0,l={unversionedId:"zio-config/config-descriptor-usage",id:"zio-config/config-descriptor-usage",title:"Using ConfigDescriptor for Read, Write, Document and Report",description:"Using Config Descriptor",source:"@site/docs/zio-config/config-descriptor-usage.md",sourceDirName:"zio-config",slug:"/zio-config/config-descriptor-usage",permalink:"/zio-config/config-descriptor-usage",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-config/config-descriptor-usage.md",tags:[],version:"current",frontMatter:{id:"config-descriptor-usage",title:"Using ConfigDescriptor for Read, Write, Document and Report",sidebar_label:"ConfigDescriptor Usage"},sidebar:"ecosystem-sidebar",previous:{title:"Read from various Sources",permalink:"/zio-config/read-from-various-sources"},next:{title:"Automatic Validations",permalink:"/zio-config/automatic-validations"}},p={},c=[{value:"Using Config Descriptor",id:"using-config-descriptor",level:2},{value:"Reader from Config Descriptor",id:"reader-from-config-descriptor",level:2},{value:"Writer from config descriptor",id:"writer-from-config-descriptor",level:2},{value:"Writing the config back to property tree",id:"writing-the-config-back-to-property-tree",level:4},{value:"Writing the config back to a Map",id:"writing-the-config-back-to-a-map",level:4},{value:"Writing the config back to a Typesafe Hocon",id:"writing-the-config-back-to-a-typesafe-hocon",level:4},{value:"Writing the config back to a Typesafe Hocon String",id:"writing-the-config-back-to-a-typesafe-hocon-string",level:4},{value:"Writing the config back to JSON",id:"writing-the-config-back-to-json",level:4},{value:"Generating a random Config using zio.config.gen",id:"generating-a-random-config-using-zioconfiggen",level:2},{value:"Document the config",id:"document-the-config",level:2},{value:"root.east_1",id:"rooteast_1",level:3},{value:"root.south_0",id:"rootsouth_0",level:3},{value:"Report on the config",id:"report-on-the-config",level:2}],s={toc:c};function g(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"using-config-descriptor"},"Using Config Descriptor"),(0,o.kt)("p",null,"Given a single ",(0,o.kt)("a",{parentName:"p",href:"/zio-config/manual-creation-of-config-descriptor"},"ConfigDescriptor")," we can use it to:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Get Readers that can read config from various sources"),(0,o.kt)("li",{parentName:"ol"},"Get Writer that can write config back"),(0,o.kt)("li",{parentName:"ol"},"Document the config"),(0,o.kt)("li",{parentName:"ol"},"Create report on the config")),(0,o.kt)("h2",{id:"reader-from-config-descriptor"},"Reader from Config Descriptor"),(0,o.kt)("p",null,"You should be familiar with reading config from various sources, given a  config descriptor."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.IO\nimport zio.config._, ConfigDescriptor._, PropertyTree._\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"case class MyConfig(ldap: String, port: Int, dburl: String)\n")),(0,o.kt)("p",null,"To not divert our focus on handling Either (only for explanation purpose), we will use\nthe below syntax troughout the code"),(0,o.kt)("p",null,"To perform any action using zio-config, we need a configuration description.\nLet's define a simple one."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'val myConfig =\n  (string("LDAP") zip int("PORT") zip string("DB_URL")).to[MyConfig]\n\nread(myConfig from ConfigSource.fromMap(Map()))\n')),(0,o.kt)("h2",{id:"writer-from-config-descriptor"},"Writer from config descriptor"),(0,o.kt)("p",null,"Let's use ",(0,o.kt)("inlineCode",{parentName:"p"},"read")," and get the result. Using the same result, we will write the config back to the source!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.Runtime\n\ncase class Database(url: String, port: Int)\ncase class AwsConfig(c1: Database, c2: Database, c3: String)\n\nval database =\n  (string("connection") zip int("port")).to[Database]\n\nval map =\n  Map(\n    "south.connection" -> "abc.com",\n    "south.port" -> "8111",\n    "east.connection" -> "xyz.com",\n    "east.port" -> "8888",\n    "appName" -> "myApp"\n  )\n\nval appConfig =\n  (((nested("south") { database } ?? "South details" zip\n    nested("east") { database } ?? "East details" zip\n    string("appName")).to[AwsConfig]) ?? "asdf"\n  ) from ConfigSource.fromMap(map, keyDelimiter = Some(\'.\'))\n\n // zio.Runtime.default.unsafe.run(read(appConfig)) (refer examples on how to manually run zio computations)\n // yields AwsConfig(Database(abc.com, 8111), Database(xyz.com, 8888), myApp)\n')),(0,o.kt)("h4",{id:"writing-the-config-back-to-property-tree"},"Writing the config back to property tree"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'\nimport zio.config.PropertyTree._\n\nval awsConfigResult = \n  AwsConfig(Database("abc.com", 8111), Database("xyz.com", 8888), "myApp")\n  \nval written: Either[String, PropertyTree[String, String]] = \n  write(appConfig, awsConfigResult)\n')),(0,o.kt)("p",null,"yield "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'Record(\n  Map(\n    "south"   -> Record(Map("connection" -> Leaf("abc.com"), "port" -> Leaf("8111"))),\n    "east"    -> Record(Map("connection" -> Leaf("xyz.com"), "port" -> Leaf("8888"))),\n    "appName" -> Leaf("myApp")\n  )\n) \n')),(0,o.kt)("h4",{id:"writing-the-config-back-to-a-map"},"Writing the config back to a Map"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'// To yield the input map that was fed in, call `flattenString` !!\nwritten.map(_.flattenString())\n\n// yields\n    Map(\n     "south.connection" -> "abc.com",\n     "south.port" -> "8111",\n     "east.connection" -> "xyz.com",\n     "east.port" -> "8888",\n     "appName" -> "myApp"\n   )\n')),(0,o.kt)("h4",{id:"writing-the-config-back-to-a-typesafe-hocon"},"Writing the config back to a Typesafe Hocon"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.config.typesafe._\n\nwritten.map(_.toHocon)\n\n// yields\n// SimpleConfigObject({"appName":"myApp","east":{"connection":"xyz.com","port":"8888"},"south":{"connection":"abc.com","port":"8111"}})\n')),(0,o.kt)("h4",{id:"writing-the-config-back-to-a-typesafe-hocon-string"},"Writing the config back to a Typesafe Hocon String"),(0,o.kt)("p",null,"Once we get ",(0,o.kt)("inlineCode",{parentName:"p"},"SimpleConfigObject")," (i.e, from ",(0,o.kt)("inlineCode",{parentName:"p"},"toHocon"),"), rendering them is straight forward, as typesafe-config library\nprovides us with an exhaustive combinations of rendering options."),(0,o.kt)("p",null,"However, we thought we will provide a few helper functions which is a simple delegation to typesafe functionalities."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.config.typesafe._\n\nwritten.map(_.toHoconString)\n  /**\n   *  yieling :\n   *  {{{\n   *\n   *    appName=myApp\n   *    east {\n   *       connection="xyz.com"\n   *       port="8888"\n   *    }\n   *   south {\n   *     connection="abc.com"\n   *     port="8111"\n   *   }\n   *\n   *  }}}\n   */\n')),(0,o.kt)("h4",{id:"writing-the-config-back-to-json"},"Writing the config back to JSON"),(0,o.kt)("p",null,"Once we get ",(0,o.kt)("inlineCode",{parentName:"p"},"SimpleConfigObject")," (i.e, from ",(0,o.kt)("inlineCode",{parentName:"p"},"toHocon"),"), rendering them is straight forward, as typesafe-config library\nprovides us with an exhaustive combinations of rendering options."),(0,o.kt)("p",null,"However, we thought we will provide a few helper functions which is a simple delegation to typesafe functionalities."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'written.map(_.toJson)\n\n  /**\n   *  yieling :\n   *  {{{\n   *\n   *    "appName" : "myApp"\n   *    "east" : {\n   *       "connection" : "xyz.com"\n   *       "port" : "8888"\n   *    }\n   *   "south" : {\n   *     "connection" : "abc.com"\n   *     "port" : "8111"\n   *   }\n   *\n   *  }}}\n   */\n')),(0,o.kt)("h2",{id:"generating-a-random-config-using-zioconfiggen"},"Generating a random Config using zio.config.gen"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.config.derivation.name\nimport zio.config.magnolia._, zio.config.gen._\n\nobject RandomConfigGenerationSimpleExample extends App {\n  sealed trait Region\n\n  @name("ap-southeast-2")\n  case object ApSouthEast2 extends Region\n\n  @name("us-east")\n  case object UsEast extends Region\n\n  case class UsernameRegion(username: String, region: Region)\n\n  println(generateConfigJson(descriptor[UsernameRegion]).unsafeRunChunk)\n\n  // yields for example\n\n  // Chunk(\n  //   {\n  //    "region" : "ap-southeast-2",\n  //     "username" : "eU2KlfATwYZ5s0Y"\n  //   }\n  // )\n}\n')),(0,o.kt)("p",null,"Refer to RandomConfigGenerationComplexExample.scala for more complex scenarios,\nand know how zio.config.gen can be helpful for users."),(0,o.kt)("h2",{id:"document-the-config"},"Document the config"),(0,o.kt)("p",null,"To generate the documentation of the config, call ",(0,o.kt)("inlineCode",{parentName:"p"},"generateDocs"),". "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.config.ConfigDocs\n\nval generatedDocs = generateDocs(appConfig)\n\n// as markdown \n val markdown =\n   generatedDocs.toTable.toGithubFlavouredMarkdown\n\n// produces the following markdown\n\n/*\n  |FieldName      |Format          |Description               |Sources |\n  |---            |---             |---                       |---     |\n  |appName        |primitive       |value of type string, asdf|constant|\n  |[east](#east)  |[all-of](#east) |                          |        |\n  |[south](#south)|[all-of](#south)|                          |        |\n  \n  ### east\n  \n  |FieldName |Format   |Description                             |Sources |\n  |---       |---      |---                                     |---     |\n  |port      |primitive|value of type int, East details, asdf   |constant|\n  |connection|primitive|value of type string, East details, asdf|constant|\n  \n  ### south\n  \n  |FieldName |Format   |Description                              |Sources |\n  |---       |---      |---                                      |---     |\n  |port      |primitive|value of type int, South details, asdf   |constant|\n  |connection|primitive|value of type string, South details, asdf|constant|\n */  \n")),(0,o.kt)("p",null,"In the above ",(0,o.kt)("inlineCode",{parentName:"p"},"markdown")," is a standard markdown format string, rendered as:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"FieldName"),(0,o.kt)("th",{parentName:"tr",align:null},"Format"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Sources"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"appName"),(0,o.kt)("td",{parentName:"tr",align:null},"primitive"),(0,o.kt)("td",{parentName:"tr",align:null},"value of type string, asdf"),(0,o.kt)("td",{parentName:"tr",align:null},"constant")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#root.east_1"},"east")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#root.east_1"},"all-of")),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#root.south_0"},"south")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#root.south_0"},"all-of")),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null})))),(0,o.kt)("h3",{id:"rooteast_1"},"root.east_1"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"FieldName"),(0,o.kt)("th",{parentName:"tr",align:null},"Format"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Sources"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"port"),(0,o.kt)("td",{parentName:"tr",align:null},"primitive"),(0,o.kt)("td",{parentName:"tr",align:null},"value of type int, East details, asdf"),(0,o.kt)("td",{parentName:"tr",align:null},"constant")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"connection"),(0,o.kt)("td",{parentName:"tr",align:null},"primitive"),(0,o.kt)("td",{parentName:"tr",align:null},"value of type string, East details, asdf"),(0,o.kt)("td",{parentName:"tr",align:null},"constant")))),(0,o.kt)("h3",{id:"rootsouth_0"},"root.south_0"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"FieldName"),(0,o.kt)("th",{parentName:"tr",align:null},"Format"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Sources"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"port"),(0,o.kt)("td",{parentName:"tr",align:null},"primitive"),(0,o.kt)("td",{parentName:"tr",align:null},"value of type int, South details, asdf"),(0,o.kt)("td",{parentName:"tr",align:null},"constant")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"connection"),(0,o.kt)("td",{parentName:"tr",align:null},"primitive"),(0,o.kt)("td",{parentName:"tr",align:null},"value of type string, South details, asdf"),(0,o.kt)("td",{parentName:"tr",align:null},"constant")))),(0,o.kt)("h2",{id:"report-on-the-config"},"Report on the config"),(0,o.kt)("p",null,"Calling ",(0,o.kt)("inlineCode",{parentName:"p"},"generateDocs")," can give some documentation (man page).\nBut most often, we need these docs to act as a report that holds the value of the actual config parameter\nalong with the rest of the details. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},' generateReport(appConfig, AwsConfig(Database("abc.com", 8111), Database("xyz.com", 8888), "myApp"))\n\n// yields a report\n')),(0,o.kt)("p",null,"Pretty print will be coming soon!"))}g.isMDXComponent=!0}}]);