"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[17947],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),g=c(n),d=a,f=g["".concat(p,".").concat(d)]||g[d]||u[d]||o;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},37539:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={id:"using-optics",title:"Using Optics"},i=void 0,s={unversionedId:"using-optics",id:"using-optics",title:"Using Optics",description:"We can use optics to work with our data structures using the get, set, and update operators on Optic.",source:"@site/node_modules/@zio.dev/zio-optics/using_optics.md",sourceDirName:".",slug:"/using-optics",permalink:"/zio-optics/using-optics",draft:!1,tags:[],version:"current",frontMatter:{id:"using-optics",title:"Using Optics"},sidebar:"sidebar",previous:{title:"Composing Optics",permalink:"/zio-optics/composing-optics"},next:{title:"Effectual Optics",permalink:"/zio-optics/effectual-optics"}},p={},c=[],l={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"We can use optics to work with our data structures using the ",(0,a.kt)("inlineCode",{parentName:"p"},"get"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"update")," operators on ",(0,a.kt)("inlineCode",{parentName:"p"},"Optic"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.optics._\n\ncase class Person(name: String, age: Int)\n\nobject Person {\n  val age: Lens[Person, Int] =\n    Lens(\n      person => Right(person.age),\n      age => person => Right(person.copy(age = age))\n    )\n}\n\nval person = Person("Jane Doe", 42)\n// person: Person = Person(name = "Jane Doe", age = 42)\n\nPerson.age.get(person)\n// res0: optics.package.OpticResult[Nothing, Int] = Right(value = 42)\n\nPerson.age.set(43)(person)\n// res1: optics.package.OpticResult[Nothing, Person] = Right(\n//   value = Person(name = "Jane Doe", age = 43)\n// )\n\nPerson.age.update(person)(_ + 1)\n// res2: optics.package.OpticResult[Nothing, Person] = Right(\n//   value = Person(name = "Jane Doe", age = 43)\n// )\n')),(0,a.kt)("p",null,"In addition to this, ZIO Optics provides special support for accessing values inside of ZIO data types such as ",(0,a.kt)("inlineCode",{parentName:"p"},"Ref"),'. Instead of having to create an optic and then use it to modify a data structure we can "zoom in" on the value inside of the ',(0,a.kt)("inlineCode",{parentName:"p"},"ZRef"),' directly using "dot" syntax.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'val ref: Ref[Map[String, Either[String, Chunk[Int]]]] =\n  ???\n\nval io: IO[OpticFailure, Unit] =\n  ref.key("key").right.at(0).update(_ + 1)\n')),(0,a.kt)("p",null,"You can use this dot syntax with ordinary values using the ",(0,a.kt)("inlineCode",{parentName:"p"},"optic")," operator."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'val map: Map[String, Either[String, Chunk[Int]]] =\n  ???\n\nval updated: Either[OpticFailure, Map[String, Either[String, Chunk[Int]]]] =\n  map.optic.key("key").right.at(0).update(_ + 1)\n')),(0,a.kt)("p",null,"Note that this syntax is currently only available for optics defined in ZIO Optics. When automatic derivation of optics is introduced this syntax will be supported for user defined data structures as well."))}u.isMDXComponent=!0}}]);