"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[35777],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>f});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),l=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(a),d=n,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||i;return a?r.createElement(f,o(o({ref:t},c),{},{components:a})):r.createElement(f,o({ref:t},c))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:n,o[1]=s;for(var l=2;l<i;l++)o[l]=a[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},61447:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=a(87462),n=(a(67294),a(3905));const i={id:"faq",title:"Frequently Answered Questions (FAQ)",sidebar_label:"FAQ"},o=void 0,s={unversionedId:"about/faq",id:"about/faq",title:"Frequently Answered Questions (FAQ)",description:"In this page we are going to answer general questions related to the ZIO project.",source:"@site/docs/about/faq.md",sourceDirName:"about",slug:"/about/faq",permalink:"/about/faq",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/about/faq.md",tags:[],version:"current",frontMatter:{id:"faq",title:"Frequently Answered Questions (FAQ)",sidebar_label:"FAQ"},sidebar:"about-sidebar",previous:{title:"About ZIO",permalink:"/about/"},next:{title:"ZIO Coding Guidelines",permalink:"/about/coding-guidelines"}},p={},l=[{value:"In ZIO ecosystem, there are lots of data types which they have <code>Z</code> prefix in their names. What this prefix stands for? Does it mean, that data type is effectual?",id:"in-zio-ecosystem-there-are-lots-of-data-types-which-they-have-z-prefix-in-their-names-what-this-prefix-stands-for-does-it-mean-that-data-type-is-effectual",level:2}],c={toc:l};function u(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"In this page we are going to answer general questions related to the ZIO project."),(0,n.kt)("h2",{id:"in-zio-ecosystem-there-are-lots-of-data-types-which-they-have-z-prefix-in-their-names-what-this-prefix-stands-for-does-it-mean-that-data-type-is-effectual"},"In ZIO ecosystem, there are lots of data types which they have ",(0,n.kt)("inlineCode",{parentName:"h2"},"Z")," prefix in their names. What this prefix stands for? Does it mean, that data type is effectual?"),(0,n.kt)("p",null,"No, it doesn't denote that the data type is effectual. Instead, the ",(0,n.kt)("inlineCode",{parentName:"p"},"Z")," prefix is used for two purposes:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Polymorphic Version of Another Data Type")," \u2014 The ",(0,n.kt)("inlineCode",{parentName:"p"},"Z")," prefix indicates a more polymorphic version of another data type, not a data type that is effectual. So for example ",(0,n.kt)("inlineCode",{parentName:"p"},"IO")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"ZIO")," are equally effectual but ",(0,n.kt)("inlineCode",{parentName:"p"},"ZIO")," is more polymorphic because it has the additional type parameter ",(0,n.kt)("inlineCode",{parentName:"p"},"R"),".")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Term Disambiguation")," \u2014 There are some cases where the ",(0,n.kt)("inlineCode",{parentName:"p"},"Z")," prefix is used to disambiguate a term that might otherwise be too common and create risk of name conflicts (e.g. ",(0,n.kt)("inlineCode",{parentName:"p"},"ZPool"),")."))),(0,n.kt)("p",null,"This convention is true across all ZIO ecosystem. For example, in ZIO Prelude, the ",(0,n.kt)("inlineCode",{parentName:"p"},"ZValidation")," is a more general version of ",(0,n.kt)("inlineCode",{parentName:"p"},"Validation")," that is polymorphic in the log type. ",(0,n.kt)("inlineCode",{parentName:"p"},"ZSet")," is a more polymorphic version of a ",(0,n.kt)("em",{parentName:"p"},"Set")," that is polymorphic in the measure type. ",(0,n.kt)("inlineCode",{parentName:"p"},"ZPure")," is more polymorphic than its type aliases in several ways as represented by its different type parameters and also serves to disambiguate it as ",(0,n.kt)("em",{parentName:"p"},"Pure")," which is too general."))}u.isMDXComponent=!0}}]);