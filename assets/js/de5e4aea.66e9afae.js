"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[25849],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>v});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),i=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=i(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=i(n),u=o,v=d["".concat(p,".").concat(u)]||d[u]||m[u]||a;return n?r.createElement(v,c(c({ref:t},l),{},{components:n})):r.createElement(v,c({ref:t},l))}));function v(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:o,c[1]=s;for(var i=2;i<a;i++)c[i]=n[i];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},59086:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>i});var r=n(87462),o=(n(67294),n(3905));const a={},c="Advanced Web Socket Server",s={unversionedId:"zio-http/v1.x/examples/advanced-examples/web-socket-advanced",id:"zio-http/v1.x/examples/advanced-examples/web-socket-advanced",title:"Advanced Web Socket Server",description:"",source:"@site/docs/zio-http/v1.x/examples/advanced-examples/web-socket-advanced.md",sourceDirName:"zio-http/v1.x/examples/advanced-examples",slug:"/zio-http/v1.x/examples/advanced-examples/web-socket-advanced",permalink:"/zio-http/v1.x/examples/advanced-examples/web-socket-advanced",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/v1.x/examples/advanced-examples/web-socket-advanced.md",tags:[],version:"current",frontMatter:{}},p={},i=[],l={toc:i};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"advanced-web-socket-server"},"Advanced Web Socket Server"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\nimport zio.http.Server\nimport zio.socket._\nimport zio._\nimport zio.duration._\nimport zio.stream.ZStream\n\nobject WebSocketAdvanced extends App {\n  // Message Handlers\n  private val open = Socket.succeed(WebSocketFrame.text("Greetings!"))\n\n  private val echo = Socket.collect[WebSocketFrame] { case WebSocketFrame.Text(text) =>\n    ZStream.repeat(WebSocketFrame.text(s"Received: $text")).schedule(Schedule.spaced(1 second)).take(3)\n  }\n\n  private val fooBar = Socket.collect[WebSocketFrame] {\n    case WebSocketFrame.Text("FOO") => ZStream.succeed(WebSocketFrame.text("BAR"))\n    case WebSocketFrame.Text("BAR") => ZStream.succeed(WebSocketFrame.text("FOO"))\n  }\n\n  // Setup protocol settings\n  private val protocol = SocketProtocol.subProtocol("json")\n\n  // Setup decoder settings\n  private val decoder = SocketDecoder.allowExtensions\n\n  // Combine all channel handlers together\n  private val socketApp = {\n\n    SocketApp(echo merge fooBar) // Called after each message being received on the channel\n\n      // Called after the request is successfully upgraded to websocket\n      .onOpen(open)\n\n      // Called after the connection is closed\n      .onClose(_ => console.putStrLn("Closed!").ignore)\n\n      // Called whenever there is an error on the socket channel\n      .onError(_ => console.putStrLn("Error!").ignore)\n\n      // Setup websocket decoder config\n      .withDecoder(decoder)\n\n      // Setup websocket protocol config\n      .withProtocol(protocol)\n  }\n\n  private val app =\n    Http.collectZIO[Request] {\n      case Method.GET -> !! / "greet" / name  => UIO(Response.text(s"Greetings ${name}!"))\n      case Method.GET -> !! / "subscriptions" => socketApp.toResponse\n    }\n\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\n    Server.start(8090, app).exitCode\n}\n\n')))}d.isMDXComponent=!0}}]);