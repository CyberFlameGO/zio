"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[98779],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>u});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=i.createContext({}),c=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=c(e.components);return i.createElement(p.Provider,{value:n},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,u=d["".concat(p,".").concat(m)]||d[m]||f[m]||o;return t?i.createElement(u,a(a({ref:n},s),{},{components:t})):i.createElement(u,a({ref:n},s))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[d]="string"==typeof e?e:r,a[1]=l;for(var c=2;c<o;c++)a[c]=t[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1005:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=t(87462),r=(t(67294),t(3905));const o={id:"automatic-validations",title:"Automatic Validations"},a=void 0,l={unversionedId:"zio-config/automatic-validations",id:"zio-config/automatic-validations",title:"Automatic Validations",description:"By bringing in zio-config-refined module, you get validations for your config parameters almost for free.",source:"@site/docs/zio-config/automatic-validations.md",sourceDirName:"zio-config",slug:"/zio-config/automatic-validations",permalink:"/zio-config/automatic-validations",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-config/automatic-validations.md",tags:[],version:"current",frontMatter:{id:"automatic-validations",title:"Automatic Validations"},sidebar:"ecosystem-sidebar",previous:{title:"ConfigDescriptor Usage",permalink:"/zio-config/config-descriptor-usage"},next:{title:"Design Principles",permalink:"/zio-config/design-principles"}},p={},c=[{value:"Basic Example",id:"basic-example",level:2},{value:"Direct Interaction with Refined Predicates",id:"direct-interaction-with-refined-predicates",level:2},{value:"Derive from existing ConfigDescriptor",id:"derive-from-existing-configdescriptor",level:2},{value:"Auto-Derivation and Refined",id:"auto-derivation-and-refined",level:2}],s={toc:c},d="wrapper";function f(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,i.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"By bringing in ",(0,r.kt)("inlineCode",{parentName:"p"},"zio-config-refined")," module, you get validations for your config parameters almost for free.\n",(0,r.kt)("inlineCode",{parentName:"p"},"zio-config")," elegantly integrates with ",(0,r.kt)("inlineCode",{parentName:"p"},"Refined")," library for you to achieve this with same ergnomics."),(0,r.kt)("p",null,"If you are not familiar with ",(0,r.kt)("inlineCode",{parentName:"p"},"refined")," library, refer ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fthomas/refined"},"https://github.com/fthomas/refined"),"."),(0,r.kt)("p",null,"There are various ways that zio-config can interact with refined library.\nTake a look at ",(0,r.kt)("inlineCode",{parentName:"p"},"zio.config.refined")," package."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"}," import zio.config._, refined._\n\n")),(0,r.kt)("p",null,"A few examples are given below."),(0,r.kt)("h2",{id:"basic-example"},"Basic Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},' import eu.timepit.refined.types.string.NonEmptyString\n\n case class Jdbc(username: NonEmptyString, password: NonEmptyString)\n\n val jdbc: ConfigDescriptor[Jdbc] =\n   (refineType[NonEmptyString]("username") zip\n     refineType[NonEmptyString]("password")).to[Jdbc]\n\n read(jdbc from ConfigSource.fromMap(Map("username" -> "", "password" -> "")))\n')),(0,r.kt)("h2",{id:"direct-interaction-with-refined-predicates"},"Direct Interaction with Refined Predicates"),(0,r.kt)("p",null,"If you need to directly interact with ",(0,r.kt)("inlineCode",{parentName:"p"},"Predicate"),"s (ex: ",(0,r.kt)("inlineCode",{parentName:"p"},"NonEmpty"),"), then\n",(0,r.kt)("inlineCode",{parentName:"p"},"refine[A, P]")," method is useful."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},' import eu.timepit.refined._, api._, string._, collection._\n \n type NonEmptyString = String Refined NonEmpty\n \n val refinedConfig: ConfigDescriptor[NonEmptyString] = \n   refineType[NonEmptyString]("USERNAME")\n  \n // Another way of doing it is\n val urlConfig: ConfigDescriptor[Refined[String, Url]] =\n   refine[String, Url]("URL")\n   \n // refineType takes a fully formed type (String Refined NonEmpty) where as refine allows you to play with the predicate directly (NonEmpty)  \n')),(0,r.kt)("h2",{id:"derive-from-existing-configdescriptor"},"Derive from existing ConfigDescriptor"),(0,r.kt)("p",null,"Of various methods available in ",(0,r.kt)("inlineCode",{parentName:"p"},"zio.config.refined")," package,\nthe most interesting one is being able to get a refined type out of an already derived ConfigDescriptor.\nThis shows the composable nature of zio-config. "),(0,r.kt)("p",null,"Take a look at the below example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},' import zio.config.magnolia.descriptor\n\n import eu.timepit.refined._, api._, numeric._, collection._\n import ConfigDescriptor.list\n\n case class MyConfig(url: String, port: Int)\n\n val configs: ConfigDescriptor[List[MyConfig]] =\n   list("databases")(descriptor[MyConfig])\n\n // A list of database configs, such that size should be greater than 2.\n val databaseList: ConfigDescriptor[Refined[List[MyConfig], Size[Greater[W.`2`.T]]]] =\n   refine[Size[Greater[W.`2`.T]]](configs)\n')),(0,r.kt)("h2",{id:"auto-derivation-and-refined"},"Auto-Derivation and Refined"),(0,r.kt)("p",null,"You can also use auto derivations with refined."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import eu.timepit.refined.W\nimport eu.timepit.refined.api.Refined\nimport eu.timepit.refined.collection.{ NonEmpty, Size }\nimport zio.config.magnolia.descriptor\n\nobject RefinedReadConfig extends App {\n  case class RefinedProd(\n    ldap: Refined[String, NonEmpty],\n    port: Refined[Int, GreaterEqual[W.`1024`.T]],\n    dbUrl: Option[Refined[String, NonEmpty]],\n    longs: Refined[List[Long], Size[Greater[W.`2`.T]]]\n  )\n\n  val configMultiMap =\n    Map(\n      "LDAP"     -> ::("ldap", Nil),\n      "PORT"     -> ::("1999", Nil),\n      "DBURL"   -> ::("ddd", Nil),\n      "LONGS" -> ::("1234", List("2345", "3456"))\n    )\n\n  val result =\n    read(descriptor[RefinedProd].mapKey(_.toUpperCase) from ConfigSource.fromMultiMap(configMultiMap))\n\n  // Right(RefinedProd(ldap,1999,Some(ddd),List(1234, 2345, 3456)))\n}\n')))}f.isMDXComponent=!0}}]);