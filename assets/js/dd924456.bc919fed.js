"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[20750],{3905:(e,n,t)=>{t.d(n,{Zo:()=>f,kt:()=>m});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=o.createContext({}),s=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},f=function(e){var n=s(e.components);return o.createElement(c.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},g=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,f=l(e,["components","mdxType","originalType","parentName"]),u=s(t),g=a,m=u["".concat(c,".").concat(g)]||u[g]||p[g]||i;return t?o.createElement(m,r(r({ref:n},f),{},{components:t})):o.createElement(m,r({ref:n},f))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=g;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[u]="string"==typeof e?e:a,r[1]=l;for(var s=2;s<i;s++)r[s]=t[s];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}g.displayName="MDXCreateElement"},84714:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var o=t(87462),a=(t(67294),t(3905));const i={id:"manual-creation-of-config",title:"Manual creation of Config"},r=void 0,l={unversionedId:"zio-config/manual-creation-of-config",id:"zio-config/manual-creation-of-config",title:"Manual creation of Config",description:"Refer to core ZIO for more documentations around Config",source:"@site/docs/zio-config/manual-creation-of-config.md",sourceDirName:"zio-config",slug:"/zio-config/manual-creation-of-config",permalink:"/zio-config/manual-creation-of-config",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-config/manual-creation-of-config.md",tags:[],version:"current",frontMatter:{id:"manual-creation-of-config",title:"Manual creation of Config"},sidebar:"ecosystem-sidebar",previous:{title:"Dive Into ZIO Config",permalink:"/zio-config/dive-into-zio-config"},next:{title:"Automatic Derivation of Config",permalink:"/zio-config/automatic-derivation-of-config"}},c={},s=[{value:"CollectAll (Sequence)",id:"collectall-sequence",level:2},{value:"Handling list",id:"handling-list",level:2}],f={toc:s},u="wrapper";function p(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,o.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Refer to core ZIO for more documentations around ",(0,a.kt)("inlineCode",{parentName:"p"},"Config")),(0,a.kt)("h2",{id:"collectall-sequence"},"CollectAll (Sequence)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'def database(i: Int) =\n  (string(s"${i}_URL") zip int(s"${i}_PORT")).to[Database]\n\nval list: Config[List[Database]] =\n  collectAll(database(0), (1 to 10).map(database): _*)\n')),(0,a.kt)("p",null,"Running this to ZIO will result in non empty list of database"),(0,a.kt)("p",null,"NOTE: ",(0,a.kt)("inlineCode",{parentName:"p"},"collectAll")," is a synonym for ",(0,a.kt)("inlineCode",{parentName:"p"},"sequence"),"."),(0,a.kt)("h2",{id:"handling-list"},"Handling list"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'final case class PgmConfig(a: String, b: List[String])\n\nval configWithList =\n  (string("xyz") zip listOf("regions")(string)).to[PgmConfig]\n\nConfig.fromEnv(configWithList, valueDelimiter = Some(","))\n// or read(configWithList from ConfigSource.fromEnv(valueDelimiter = Some(",")))\n')),(0,a.kt)("p",null,"List is probably better represented in HOCON files.\nzio-config-typesafe enables you to depend on HOCON files to manage your configuration."),(0,a.kt)("p",null,"Given;"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'val listHocon =\n  """\n    accounts = [\n      {\n         region : us-east\n         accountId: jon\n      }\n      {\n         region : us-west\n         accountId: chris\n      }\n    ]\n    database {\n        port : 100\n        url  : postgres\n    }\n  """\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.config.typesafe.TypesafeConfigSource._\nimport zio.config.magnolia._\n\n// A nested example with type safe config, and usage of magnolia\nfinal case class Accnt(region: String, accountId: String)\n\nfinal case class Db(port: Int, url: String)\n\nfinal case class AwsDetails(accounts: List[Accnt], database: Db)\n\nval autoListConfig = descriptor[AwsDetails]\n\nread(autoListConfig from hocon(listHocon))\n\n// yields\n//  AwsDetails(\n//    List(Accnt("us-east", "jon"), Accnt("us-west", "chris")),\n//    Db(100, "postgres")\n//  )\n')),(0,a.kt)("p",null,"Note that ",(0,a.kt)("inlineCode",{parentName:"p"},"autoListConfig")," (automatically generated) config, is exactly similar to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'val accnt =\n  (string("region") zip string("accountId")).to[Accnt]\n\nval db = (int("port") zip string("url")).to[Db]\n\nval nonAutomatic =\n  (nested("accounts")(listOf(accnt)) zip nested("database")(db)).to[AwsDetails]\n')),(0,a.kt)("p",null,"Please find more details on the behaviour of ",(0,a.kt)("inlineCode",{parentName:"p"},"List")," for various sources in ",(0,a.kt)("inlineCode",{parentName:"p"},"Sources")," section of the documentation."))}p.isMDXComponent=!0}}]);