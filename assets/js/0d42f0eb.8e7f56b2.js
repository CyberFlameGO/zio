"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[37208],{3905:(n,e,o)=>{o.d(e,{Zo:()=>p,kt:()=>m});var a=o(67294);function t(n,e,o){return e in n?Object.defineProperty(n,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[e]=o,n}function r(n,e){var o=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),o.push.apply(o,a)}return o}function i(n){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?r(Object(o),!0).forEach((function(e){t(n,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(o,e))}))}return n}function l(n,e){if(null==n)return{};var o,a,t=function(n,e){if(null==n)return{};var o,a,t={},r=Object.keys(n);for(a=0;a<r.length;a++)o=r[a],e.indexOf(o)>=0||(t[o]=n[o]);return t}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)o=r[a],e.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(n,o)&&(t[o]=n[o])}return t}var s=a.createContext({}),c=function(n){var e=a.useContext(s),o=e;return n&&(o="function"==typeof n?n(e):i(i({},e),n)),o},p=function(n){var e=c(n.components);return a.createElement(s.Provider,{value:e},n.children)},u="mdxType",g={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},f=a.forwardRef((function(n,e){var o=n.components,t=n.mdxType,r=n.originalType,s=n.parentName,p=l(n,["components","mdxType","originalType","parentName"]),u=c(o),f=t,m=u["".concat(s,".").concat(f)]||u[f]||g[f]||r;return o?a.createElement(m,i(i({ref:e},p),{},{components:o})):a.createElement(m,i({ref:e},p))}));function m(n,e){var o=arguments,t=e&&e.mdxType;if("string"==typeof n||t){var r=o.length,i=new Array(r);i[0]=f;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=n,l[u]="string"==typeof n?n:t,i[1]=l;for(var c=2;c<r;c++)i[c]=o[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,o)}f.displayName="MDXCreateElement"},78038:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>g,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=o(87462),t=(o(67294),o(3905));const r={id:"read-from-various-sources",title:"Read from various Sources"},i=void 0,l={unversionedId:"zio-config/read-from-various-sources",id:"zio-config/read-from-various-sources",title:"Read from various Sources",description:"zio-config supports various sources.",source:"@site/docs/zio-config/read-from-various-sources.md",sourceDirName:"zio-config",slug:"/zio-config/read-from-various-sources",permalink:"/zio-config/read-from-various-sources",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-config/read-from-various-sources.md",tags:[],version:"current",frontMatter:{id:"read-from-various-sources",title:"Read from various Sources"},sidebar:"ecosystem-sidebar",previous:{title:"Automatic Derivation of Config",permalink:"/zio-config/automatic-derivation-of-config"},next:{title:"Automatic Validations",permalink:"/zio-config/automatic-validations"}},s={},c=[{value:"Constant Map",id:"constant-map",level:2},{value:"HOCON String",id:"hocon-string",level:2},{value:"HOCON File",id:"hocon-file",level:2},{value:"Json",id:"json",level:2},{value:"Yaml FIle",id:"yaml-file",level:2},{value:"Xml String",id:"xml-string",level:2}],p={toc:c},u="wrapper";function g(n){let{components:e,...o}=n;return(0,t.kt)(u,(0,a.Z)({},p,o,{components:e,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"zio-config supports various sources.\nMore documentation around ",(0,t.kt)("inlineCode",{parentName:"p"},"IndexedFlat")," (an extension of  ZIO's  ",(0,t.kt)("inlineCode",{parentName:"p"},"ConfigProvider.Flat"),")\nto handle more complex sources will be provided soon."),(0,t.kt)("p",null,"Forming a source gets into a standard pattern, and is easy for you to add another one."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},"import zio._, Config._, ConfigProvider._\nimport zio.config._, magnolia._\n")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},"case class MyConfig(ldap: String, port: Int, dburl: String)\n")),(0,t.kt)("p",null,"To perform any action using zio-config, we need a configuration description.\nLet's define a simple one."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},'val myConfig =\n  (string("LDAP") zip int("PORT") zip string("DB_URL")).to[MyConfig]\n\n // val automatedConfig = deriveConfig[MyConfig]; using zio-config-magnolia\n')),(0,t.kt)("p",null,"More details about defining config descriptor is in ",(0,t.kt)("a",{parentName:"p",href:"/zio-config/manual-creation-of-config"},"here"),"."),(0,t.kt)("h2",{id:"constant-map"},"Constant Map"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},'\nval mapSource =\n  ConfigProvider.fromMap(\n    Map(\n      "LDAP" -> "xyz",\n      "PORT" -> "1222",\n      "DB_URL" -> "postgres"\n    )\n  )\n\nval io = mapSource.load(myConfig)\n// Running io (which is a zio) to completion yields  MyConfig(xyz, 1222, postgres)\n\n')),(0,t.kt)("h2",{id:"hocon-string"},"HOCON String"),(0,t.kt)("p",null,"To enable HOCON source, you have to bring in ",(0,t.kt)("inlineCode",{parentName:"p"},"zio-config-typesafe")," module.\nThere are many examples in examples module in zio-config."),(0,t.kt)("p",null,"Here is an quick example"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.config.typesafe._\nimport zio.config.magnolia._\n")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},'case class SimpleConfig(port: Int, url: String, region: Option[String])\n\nval automaticDescription = deriveConfig[SimpleConfig]\n\nval hoconSource =\n  ConfigProvider.fromHoconString(\n      """\n      {\n        port : 123\n        url  : bla\n        region: useast\n      }\n\n      """\n    )\n\n\nval anotherHoconSource =\n  ConfigProvider.fromHoconString(\n      """\n        port=123\n        url=bla\n        region=useast\n      """\n  )\n\nhoconSource.load(deriveConfig[SimpleConfig])\n\n// yielding SimpleConfig(123,bla,Some(useast))\n')),(0,t.kt)("h2",{id:"hocon-file"},"HOCON File"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},'ConfigProvider.fromHoconFile(new java.io.File("fileapth"))\n')),(0,t.kt)("h2",{id:"json"},"Json"),(0,t.kt)("p",null,"You can use ",(0,t.kt)("inlineCode",{parentName:"p"},"zio-config-typesafe")," module to fetch json as well"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},'val jsonString =\n   """\n   {\n     "port" : "123"\n     "url"  : "bla"\n     "region": "useast"\n   }\n\n   """\n\nConfigProvider.fromHoconString(jsonString)\n')),(0,t.kt)("h2",{id:"yaml-file"},"Yaml FIle"),(0,t.kt)("p",null,"Similar to Hocon source, we have ",(0,t.kt)("inlineCode",{parentName:"p"},"ConfigProvider.fromYamlString")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.config.yaml._\n\nConfigProvider.fromYamlString\n\n")),(0,t.kt)("h2",{id:"xml-string"},"Xml String"),(0,t.kt)("p",null,"zio-config can read XML strings. Note that it's experimental with a dead simple native xml parser,\nCurrently it cannot XML comments, and has not been tested with complex data types, which will be fixed in the near future."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.config.xml.experimental._\nimport zio.Config\n\nfinal case class Configuration(aws: Aws, database: Database)\n\nobject Configuration {\n  val config: Config[Configuration] =\n    Aws.config.nested("aws").zip(Database.config.nested("database")).to[Configuration].nested("config")\n\n  final case class Aws(region: String, account: String)\n\n  object Aws {\n    val config: Config[Aws] = Config.string("region").zip(Config.string("account")).to[Aws]\n  }\n  final case class Database(port: Int, url: String)\n\n  object Database {\n    val config: Config[Database] = Config.int("port").zip(Config.string("url")).to[Database]\n  }\n}\n\nval config =\n  s"""\n     |<config>\n     |  <aws region="us-east" account="personal"></aws>\n     |  <database port="123" url="some url"></database>\n     |</config>\n     |\n     |""".stripMargin\n\nval parsed = ConfigProvider.fromYamlString(config).load(Configuration.config)\n\n')))}g.isMDXComponent=!0}}]);