"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[59787],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),d=r,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return t?a.createElement(f,i(i({ref:n},p),{},{components:t})):a.createElement(f,i({ref:n},p))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},43597:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=t(87462),r=(t(67294),t(3905));const o={id:"zio-nio",title:"ZIO NIO"},i=void 0,l={unversionedId:"ecosystem/officials/zio-nio",id:"ecosystem/officials/zio-nio",title:"ZIO NIO",description:"ZIO NIO is a small, unopinionated ZIO interface to NIO.",source:"@site/docs/ecosystem/officials/zio-nio.md",sourceDirName:"ecosystem/officials",slug:"/ecosystem/officials/zio-nio",permalink:"/ecosystem/officials/zio-nio",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/ecosystem/officials/zio-nio.md",tags:[],version:"current",frontMatter:{id:"zio-nio",title:"ZIO NIO"}},s={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2}],p={toc:c};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://zio.github.io/zio-nio/"},"ZIO NIO")," is a small, unopinionated ZIO interface to NIO."),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"In Java, there are two packages for I/O operations:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Java IO (",(0,r.kt)("inlineCode",{parentName:"p"},"java.io"),")"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Standard Java IO API"),(0,r.kt)("li",{parentName:"ul"},"Introduced since Java 1.0"),(0,r.kt)("li",{parentName:"ul"},"Stream-based API"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Blocking I/O operation")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Java NIO (",(0,r.kt)("inlineCode",{parentName:"p"},"java.nio"),")"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Introduced since Java 1.4"),(0,r.kt)("li",{parentName:"ul"},"NIO means ",(0,r.kt)("em",{parentName:"li"},"New IO"),", an alternative to the standard Java IO API"),(0,r.kt)("li",{parentName:"ul"},"It can operate in a ",(0,r.kt)("strong",{parentName:"li"},"non-blocking mode")," if possible"),(0,r.kt)("li",{parentName:"ul"},"Buffer-based API")))),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://docs.oracle.com/javase/8/docs/api/java/nio/package-summary.html"},"Java NIO")," is an alternative to the Java IO API. Because it supports non-blocking IO, it can be more performant in concurrent environments like web services."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"ZIO NIO is a ZIO wrapper on Java NIO. It comes in two flavors:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"zio.nio.core"))," \u2014 a small and unopionanted ZIO interface to NIO that just wraps NIO API in ZIO effects,"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"zio.nio"))," \u2014 an opinionated interface with deeper ZIO integration that provides more type and resource safety.")),(0,r.kt)("p",null,"In order to use this library, we need to add one of the following lines in our ",(0,r.kt)("inlineCode",{parentName:"p"},"build.sbt")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "dev.zio" %% "zio-nio-core" % "1.0.0-RC11"\nlibraryDependencies += "dev.zio" %% "zio-nio"      % "1.0.0-RC11" \n')),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"Let's try writing a simple server using ",(0,r.kt)("inlineCode",{parentName:"p"},"zio-nio")," module:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.console._\nimport zio.nio.channels._\nimport zio.nio.core._\nimport zio.stream._\n\nobject ZIONIOServerExample extends zio.App {\n  val myApp =\n    AsynchronousServerSocketChannel()\n      .use(socket =>\n        for {\n          addr <- InetSocketAddress.hostName("localhost", 8080)\n          _ <- socket.bindTo(addr)\n          _ <- putStrLn(s"Waiting for incoming connections on $addr endpoint").orDie\n          _ <- ZStream\n            .repeatEffect(socket.accept.preallocate)\n            .map(_.withEarlyRelease)\n            .mapMPar(16) {\n              _.use { case (closeConn, channel) =>\n                for {\n                  _ <- putStrLn("Received connection").orDie\n                  data <- ZStream\n                    .repeatEffectOption(\n                      channel.readChunk(64).eofCheck.orElseFail(None)\n                    )\n                    .flattenChunks\n                    .transduce(ZTransducer.utf8Decode)\n                    .run(Sink.foldLeft("")(_ + _))\n                  _ <- closeConn\n                  _ <- putStrLn(s"Request Received:\\n${data.mkString}").orDie\n                } yield ()\n              }\n            }.runDrain\n        } yield ()\n      ).orDie\n   \n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\n    myApp.exitCode\n}\n')),(0,r.kt)("p",null,"Now we can send our requests to the server using ",(0,r.kt)("em",{parentName:"p"},"curl")," command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'curl -X POST localhost:8080 -d "Hello, ZIO NIO!"\n')))}u.isMDXComponent=!0}}]);