"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[55016],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>u});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(r),f=a,u=m["".concat(s,".").concat(f)]||m[f]||d[f]||i;return r?n.createElement(u,o(o({ref:t},c),{},{components:r})):n.createElement(u,o({ref:t},c))}));function u(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},71018:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const i={id:"streaming-file",title:"Streaming File Example",sidebar_label:"Streaming File"},o=void 0,l={unversionedId:"zio-http/examples/advanced/streaming-file",id:"zio-http/examples/advanced/streaming-file",title:"Streaming File Example",description:"",source:"@site/docs/zio-http/examples/advanced/streaming-file.md",sourceDirName:"zio-http/examples/advanced",slug:"/zio-http/examples/advanced/streaming-file",permalink:"/zio-http/examples/advanced/streaming-file",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/examples/advanced/streaming-file.md",tags:[],version:"current",frontMatter:{id:"streaming-file",title:"Streaming File Example",sidebar_label:"Streaming File"},sidebar:"ecosystem-sidebar",previous:{title:"Server",permalink:"/zio-http/examples/advanced/server"},next:{title:"Streaming Response",permalink:"/zio-http/examples/advanced/streaming-response"}},s={},p=[],c={toc:p},m="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\nimport zio.http.Server\nimport zio.stream.ZStream\nimport zio._\n\nimport java.io.File\nimport java.nio.file.Paths\n\nobject FileStreaming extends App {\n\n  // Create HTTP route\n  val app = Http.collectHttp[Request] {\n    case Method.GET -> !! / "health" => Http.ok\n\n    // Read the file as ZStream\n    // Uses the blocking version of ZStream.fromFile\n    case Method.GET -> !! / "blocking" => Http.fromStream(ZStream.fromFile(Paths.get("README.md")))\n\n    // Uses netty\'s capability to write file content to the Channel\n    // Content-type response headers are automatically identified and added\n    // Does not use Chunked transfer encoding\n    case Method.GET -> !! / "video" => Http.fromFile(new File("src/main/resources/TestVideoFile.mp4"))\n    case Method.GET -> !! / "text"  => Http.fromFile(new File("src/main/resources/TestFile.txt"))\n  }\n\n  // Run it like any simple app\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\n    Server.start(8090, app.silent).exitCode\n}\n')))}d.isMDXComponent=!0}}]);